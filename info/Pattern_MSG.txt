//Messages Patterns
    //Message Buttons !!!!!WhatsApp Bussines ONLY!!!!!(deprecated: maybe if change the version off the api wweb.js, the thing changes)
    const buttons = new Buttons(
        'Choose an option:',
        [
            { id: 'option1', body: 'Option 1' },
            { id: 'option2', body: 'Option 2' },
            { id: 'option3', body: 'Option 3' }
        ],
        'Title',
        'Footer'
    )

    await client.sendMessage(chatId, buttons)

    if (msg.type === 'buttons_response') {
        const buttonId = msg.selectedButtonId
        if (buttonId === 'option1') {
            await client.sendMessage(chatId, 'You chose Option 1')
        } else if (buttonId === 'option2') {
            await client.sendMessage(chatId, 'You chose Option 2')
        } else if (buttonId === 'option3') {
            await client.sendMessage(chatId, 'You chose Option 3')
        }
    }


    //text
    await sleep(1.5 * 1000)
    chat.sendStateTyping()
    await sleep(1 * 1000)
    client.sendMessage(msg.from, await fs.readFile('./Midia/texts/Texto_Mensagem.txt', 'utf8'))

    
    //file
    await sleep(1.5 * 1000)
    client.sendMessage(msg.from, MessageMedia.fromFilePath('./Midia/files/Arquivo.txt'), { caption: await fs.readFile('./Midia/texts/Legenda_Arquivo.txt', 'utf8') })
    
    
    //Image
    await sleep(1.5 * 1000)
    client.sendMessage(msg.from, MessageMedia.fromFilePath('./Midia/images/Foto.png'), { caption: await fs.readFile('./Midia/texts/Legenda_Imagem.txt', 'utf8') })
    

    //Audio
    await sleep(1.5 * 1000)
    chat.sendStateRecording()
    await sleep(1 * 1000)
    client.sendMessage(msg.from, MessageMedia.fromFilePath('./Midia/audios/Audio.m4a'), { sendAudioAsVoice: true})
    

    //Video
    await sleep(1.5 * 1000)
    client.sendMessage(msg.from, MessageMedia.fromFilePath('./Midia/videos/Video.mp4'), { caption: await fs.readFile('./Midia/texts/Legenda_Video.txt', 'utf8') })


    //Messages with multiple paths
    console.log(`> ⏲️  Timer STARTING for ${timer_Duration_ / 1000} ${timer_Duration_Type_MSG_debug} to send NEXT message...`)
    if (global.Log_Callback) global.Log_Callback(`> ⏲️ Timer STARTING for ${timer_Duration_ / 1000} ${timer_Duration_Type_MSG_debug} to send NEXT message...`)
    
    timer = setTimeout (async () => {
        console.log(`> ⏰ Timer FINALIZED ${timer_Duration_ / 1000} ${timer_Duration_Type_MSG_debug} to send NEXT message.`)
        if (global.Log_Callback) global.Log_Callback(`> ⏰ Timer FINALIZED ${timer_Duration_ / 1000} ${timer_Duration_Type_MSG_debug} to send NEXT message.`)

            
        
        
        timer = null
        MSG = false
    }, timer_Duration_)
    await Sleep_Timer(12.5 * 1000, Cancel_Promise)
    await Promise_
    

    if (MSG) {
        clearTimeout(timer)
        timer = null

        console.log(`>  ℹ️ Timer ended BEFORE ${timer_Duration_ / 1000} ${timer_Duration_Type_MSG_debug} to send NEXT message.`)
        if (global.Log_Callback) global.Log_Callback(`>  ℹ️  Timer ended BEFORE ${timer_Duration_ / 1000} ${timer_Duration_Type_MSG_debug} to send NEXT message.`)
        

        
    }
    MSG = true